openapi: 3.0.0
info:
  title: User
  version: v2.0.0
  description: |
    This is the REST API documentation for the [User](https://github.com/vmwarecloudadvocacy/user) Service app of the [ACME Fitness Shop](https://github.com/vmwarecloudadvocacy/acme_fitness_demo).
  contact:
    name: VMware Cloud Advocacy team
    url: 'https://github.com/vmwarecloudadvocacy'
  license:
    name: MIT
    url: 'https://github.com/vmwarecloudadvocacy/user/blob/master/LICENSE'
servers:
  - url: 'http://localhost:8081'
paths:
  /users:
    get:
      summary: Get Users
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    email:
                      type: string
                    firstname:
                      type: string
                    lastname:
                      type: string
                    id:
                      type: string
              examples:
                sample:
                  value:
                    data:
                      - username: walter
                        email: walter@acmefitness.com
                        firstname: Walter
                        lastname: White
                        id: 5c61ed848d891bd9e8016898
                      - username: dwight
                        email: dwight@acmefitness.com
                        firstname: Dwight
                        lastname: Schrute
                        id: 5c61ed848d891bd9e8016899
      description: Returns the list of all users
      operationId: get_users
  '/users/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get User Details
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                      email:
                        type: string
                      firstname:
                        type: string
                      lastname:
                        type: string
                      id:
                        type: string
                  status:
                    type: integer
              examples:
                sample:
                  value:
                    data:
                      username: dwight
                      email: dwight@acmefitness.com
                      firstname: Dwight
                      lastname: Schrute
                      id: 5c61ed848d891bd9e8016899
                    status: 200
      operationId: get_user_details
      description: Returns details about a specific user id
  /login/:
    post:
      summary: Login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  status:
                    type: integer
              examples:
                sample:
                  value:
                    access_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8xIiwidHlwIjoiSldUIn0.eyJVc2VybmFtZSI6ImVyaWMiLCJleHAiOjE1NzA3NjI5NzksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.n70EAaiY6rbH1QzpoUJhx3hER4odW8FuN2wYG1sgH7g
                    refresh_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8yIiwidHlwIjoiSldUIn0.eyJleHAiOjE1NzA3NjM1NzksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.zwGB1340IVMLjMf_UnFC_rEeNdD131OGPcg_S0ea8DE
                    status: 200
      operationId: post_login
      description: 'Authenticate and Login user. The payload to a valid response contains an `access_token` which is used to make requests to other services to get data. The `refresh_token` is used to request new `access_token`. If both `refresh_token` and `access_token` expire, then the user needs to log back in again.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            examples:
              sample:
                value:
                  username: username
                  password: password
        description: Login payload
  /refresh-token:
    post:
      summary: Refresh Token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  status:
                    type: integer
              examples:
                sample:
                  value:
                    access_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8xIiwidHlwIjoiSldUIn0.eyJVc2VybmFtZSI6ImVyaWMiLCJleHAiOjE1NzA3NjMyMjksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.wrWsDNor28aWv6huKUHAuVyROGAXqjO5luPfa5K5NQI
                    refresh_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8yIiwidHlwIjoiSldUIn0.eyJleHAiOjE1NzA3NjM1NzksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.zwGB1340IVMLjMf_UnFC_rEeNdD131OGPcg_S0ea8DE
                    status: 200
      description: Request new `access_token` by using the `refresh_token`
      operationId: post_refresh_token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
          application/xml:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
            examples:
              sample:
                value:
                  refresh_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8yIiwidHlwIjoiSldUIn0.eyJleHAiOjE1NzA3NjM1NzksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.zwGB1340IVMLjMf_UnFC_rEeNdD131OGPcg_S0ea8DE
        description: Refresh token payload
  /verify-token:
    post:
      summary: Verify Token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: integer
              examples:
                sample:
                  value:
                    message: Token Valid. User Authorized
                    status: 200
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: integer
              examples:
                sample:
                  value:
                    message: Invalid Key. User Not Authorized
                    status: 401
      operationId: post_verify_token
      description: 'Verify access_token validity. If the the JWT is valid and user is authorized, if the JWT is not valid (either expired or invalid signature) then the user is NOT authorized.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
            examples:
              sample:
                value:
                  access_token: eyJhbGciOiJIUzI1NiIsImtpZCI6InNpZ25pbl8xIiwidHlwIjoiSldUIn0.eyJVc2VybmFtZSI6ImVyaWMiLCJleHAiOjE1NzA3NjMyMjksInN1YiI6IjVkOTNlMTFjNmY4Zjk4YzlmYjI0ZGU0NiJ9.wrWsDNor28aWv6huKUHAuVyROGAXqjO5luPfa5K5NQI
        description: Verify token payload
  /register:
    post:
      summary: Register User
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  resourceId:
                    type: string
                  status:
                    type: integer
              examples:
                sample:
                  value:
                    message: 'User created successfully!'
                    resourceId: 5c61ef891d41c8de20281dd2
                    status: 201
      operationId: post_register
      description: Register/Create new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                email:
                  type: string
            examples:
              sample:
                value:
                  username: peterp
                  password: 'vmware1!'
                  firstname: amazing
                  lastname: spiderman
                  email: peterp@acmefitness.com
        description: Register user payload
